#! /usr/bin/env python
#code will determine the greatest interaction energy for each molecule calculation pair, and provide a convenient view of final and initial positions for the optimization

import subprocess
import readline
import shutil
from re import sub
from collections import defaultdict
from decimal import *
import numpy as np
import time
import os
import operator

#set decimal context
getcontext().prec = 14
#determine who the user is
user = subprocess.Popen('whoami', stdout=subprocess.PIPE)
name = str(user.communicate()[0].split()).replace("['","").replace("']","")
#determine filesystem
FS = subprocess.Popen('pwd', stdout=subprocess.PIPE)
fs = str(FS.communicate()[0].split())
getHost = subprocess.Popen('hostname', stdout=subprocess.PIPE)
host = getHost.communicate()[0].split()[0]


if 'login0.crc.pitt.edu' in host and 'ihome' in fs:
    def calculationStatus( oLocation, uName, aJobs, Minimum, Index, localMinLocation, goodOpts ):
        tempListEnergies = []
        tempListConfigs = []
        #ls the number directories for each interaction pair
        nums = subprocess.Popen(r'ls -d */', stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=oLocation, shell=True)
        numbers = nums.communicate()[0].split()
        #find the mimimum and corresponding index for each calculation
        if 'ls:' == numbers[0]:
            return(Minimum,Index,localMinLocation,tempListEnergies,tempListConfigs,goodOpts)
        for number in numbers:
            innerLocation = oLocation + str(number)
            files2 = subprocess.Popen('ls', stdout=subprocess.PIPE, cwd=innerLocation)
            fileNames2 = files2.communicate()[0].split()
            if "geometryOptimizationOrca.out" in fileNames2:
                additionalCycles2 = subprocess.Popen('grep "The optimization did not converge but reached the" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                cycleFlag2 = additionalCycles2.communicate()[0]
                calcSuccess2 = subprocess.Popen('grep "OPTIMIZATION RUN DONE" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                calcFlag2 = calcSuccess2.communicate()[0]
                lambdaSuccess2 = subprocess.Popen('grep "Error (ORCA_GSTEP)" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                lambdaFlag2 = lambdaSuccess2.communicate()[0]
                stepSuccess = subprocess.Popen('grep "SERIOUS PROBLEM IN SOSCF" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                stepFlag = stepSuccess.communicate()[0]
                if "The optimization did not converge" in str(cycleFlag2) and "zfs1" not in oLocation:
                    getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    tempNumber = getNumber.communicate()[0]
                    if (tempNumber not in aJobs):
                        print('\n\n\n*****Optimization needs more steps*****\n{0}\n'.format(innerLocation))
                        #determine if the calculation is in the user's directory, or a different user.
                        if (uName == 'jpr54'):
                            #restart the calculation. First, move the gbw file
                            wavefunctionMove = subprocess.Popen('mv geometryOptimizationOrca.gbw geometryOptimizationOrcaOLD.gbw', cwd=innerLocation, shell=True)
                            #the name of the structure file should be...
                            structureFileName = iStruct + '_' + str(number)
                            #structureMove = subprocess.Popen(r'mv geometryOptimizationOrca.xyz {0}.xyz'.format(structureFileName.replace('c',',')), cwd=innerLocation, shell=True)
                            #now, modify the .inp file! Read all the lines of input file
                            optfile = open('{0}geometryOptimizationOrca.inp'.format(innerLocation), 'r')
                            lines = optfile.readlines()
                            optfile.close()
                            newopt = open('{0}geometryOptimizationOrca.inp'.format(innerLocation), 'w')
                            newopt.write('#give keywords by using !\n')
                            newopt.write('#functional, number of basis sets, dispersion correction\n')
                            newopt.write('! PBE Def2-TZVP TIGHTSCF OPT D3BJ MORead pal6\n')
                            newopt.write('%moinp "geometryOptimizationOrcaOLD.gbw"\n')
                            newopt.write('#the numbers after xyzfile correspond to charge and multiplicity\n')
                            newopt.write('{0}'.format(lines[-1]))
                            newopt.close()
                            coordName = lines[-1].rsplit(' ', 1)[1]
                            structureMove = subprocess.Popen('mv geometryOptimizationOrca.xyz {0}'.format(coordName), cwd=innerLocation, shell=True)
                            job = subprocess.Popen('sbatch job.slurm', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                            #get the job number so it can be added to the JobId file
                            jobNumber = job.communicate()[0].split()[3]
                            print('{0} {1}'.format(jobNumber,structureFileName))
                            #append the job number into the file so it can be compared to what is running in the queue
                            jobFile = open('{0}JobId'.format(innerLocation), 'w')
                            jobFile.write('{0}'.format(jobNumber))
                            jobFile.close()
                elif "OPTIMIZATION" in str(calcFlag2):
                    getEnergy = subprocess.Popen('grep "FINAL SINGLE POINT ENERGY" geometryOptimizationOrca.out | tail -n 1', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    v = Decimal(getEnergy.communicate()[0].split()[4])
                    tempListEnergies.append(v)
                    tempListConfigs.append(number)
                    goodOpts = goodOpts + 1
                    if v < Minimum:
                        Minimum = v
                        Index = number
                        localMinLocation = innerLocation
                    #move the calculation to zfs
                    if 'zfs' not in innerLocation:
                        try:
                            subprocess.Popen('bash -c "mv {0} /zfs1/kjohnson/jpr54/orca/geometryOptimizations/interactions/{1}/"'.format(innerLocation, iStruct), shell=True)
                        except:
                            print('Trouble moving {0} to zfs.\n'.format(innerLocation))
                elif "ORCA_GSTEP" in lambdaFlag2 or "PROBLEM IN SOSCF" in stepFlag:
                    ignore = 1
                    #This should be moved to zfs. It is not useful data.
                    if 'zfs' not in innerLocation:
                        try:
                            subprocess.Popen('bash -c "mv {0} /zfs1/kjohnson/jpr54/orca/geometryOptimizations/interactions/{1}/"'.format(innerLocation, iStruct), shell=True)
                        except:
                            print('Trouble moving {0} to zfs.\n'.format(innerLocation))
                else:
                    getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    tempNumber = getNumber.communicate()[0]
                    if tempNumber not in activeJobs:
                        print('\n\n\n*****Walltime likely exceeded*****\n{0}\n\n\n'.format(innerLocation))
            elif 'geometryOptimizationOrca.out' not in fileNames2:
                if 'geometryOptimizationOrca.inp' not in fileNames2 and 'job.slurm' not in fileNames2:
                    print('\nPossible failed file deletion without directory deletion at {0}\n'.format(innerLocation))
                elif 'job.pbs' in fileNames2:
                    print('\nLegacy job problem: {0}\n'.format(innerLocation))
                else:
                    getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    tempNumber = getNumber.communicate()[0]
                    if tempNumber not in aJobs:
                        #check to make sure the calculation files are not empty.
                        if os.path.getsize(innerLocation+'job.slurm') == 0:
                            print('\nCalculation files are empty: {0}'.format(innerLocation))
                        else:
                            #calculation may have been killed. resubmit it.
                            print('\nCalculation {0} may have been killed (by mem error). Resubmitting.\n'.format(innerLocation))
                            job = subprocess.Popen('sbatch job.slurm', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                            #get the job number so it can be added to the JobId file
                            jobNumber = job.communicate()[0].split()[3]
                            structureFileName = iStruct + '_' + str(number)
                            print('{0} {1}'.format(jobNumber,structureFileName))
                            #append the job number into the file so it can be compared to what is running in the queue
                            jobFile = open('{0}JobId'.format(innerLocation), 'w')
                            jobFile.write('{0}'.format(jobNumber))
                            jobFile.close()
        #copy trajectory for the best interaction
            if number == numbers[-1]:
                trajectoryMoveLocation = trajectoryLocation+iStruct+'OptimumTrajectory.xyz'
                configurationMoveLocation = finalConfigurationLocation + iStruct + 'OptimumConfiguration.xyz'
                try:
                    copyTrajectory = subprocess.Popen(r'cp -f geometryOptimizationOrca.trj {0}'.format(trajectoryMoveLocation), cwd=localMinLocation, shell=True)
                    copyConfiguration = subprocess.Popen('cp -f geometryOptimizationOrca.xyz {0}'.format(configurationMoveLocation), cwd=localMinLocation, shell=True)
                except:
                    time.sleep(0)
        return(Minimum,Index,localMinLocation,tempListEnergies,tempListConfigs,goodOpts)



#*********************Part1******************************************
    trajectoryLocation = '/zfs1/kjohnson/jpr54/orca/geometryOptimizations/bestInteractionTrajectories/'
    finalConfigurationLocation = '/zfs1/kjohnson/jpr54/orca/geometryOptimizations/finalConfigurations/'
    #figure out what is in the queue
    currentJobs = subprocess.Popen("squeue -u $USER -o '%7i%24j%8u' | grep 'jpr54' | awk '{print $1;}'", stdout=subprocess.PIPE, shell=True)
    activeJobs = currentJobs.communicate()[0].split()
    #identify all the energies of the single molecules from ihome and zfs
    sStructures = subprocess.Popen('ls', stdout=subprocess.PIPE, cwd='/ihome/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/')
    #sStructures2 = subprocess.Popen('ls', stdout=subprocess.PIPE, cwd='/zfs1/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/')
    singleMolecules1 = sStructures.communicate()[0].split()
    #singleMolecules2 = sStructures2.communicate()[0].split()
    singleMolecules = singleMolecules1 #+ singleMolecules2
    d = defaultdict(list)
    #create array to hold energies of single molecules.
    #get the energies of all the single molecules, store them in the dictionary in position corresponding to name
    for counter, structure in enumerate(singleMolecules):
        if structure.lower() not in d.keys():
            k = structure.lower()
            if structure in singleMolecules1:
                location = '/ihome/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/' + structure + '/'
            #elif structure in singleMolecules2:
                #location = '/zfs1/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/' + structure + '/'
            files = subprocess.Popen('ls', stdout=subprocess.PIPE, cwd=location)
            fileNames = files.communicate()[0].split()
            #next line will only show calculations that have finished running:
            if "geometryOptimizationOrca.out" in fileNames:
                additionalCycles = subprocess.Popen('grep "The optimization did not converge but reached the maximum number of" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=location, shell=True)
                cycleFlag = additionalCycles.communicate()[0]
                calcSuccess = subprocess.Popen(r'grep "OPTIMIZATION RUN DONE" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=location, shell=True)
                calcFlag = calcSuccess.communicate()[0]
                lambdaSuccess = subprocess.Popen('grep "Error (ORCA_GSTEP)" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=location, shell=True)
                lambdaFlag = lambdaSuccess.communicate()[0]
                #next line will make sure that calculation did not run out of geometry optimization steps
                if "The optimization did not converge" in str(cycleFlag):
                    #check if the calculation is idled in the queue
                    getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=location, shell=True)
                    tempNumber = getNumber.communicate()[0]
                    if tempNumber not in activeJobs:
                        print('\n\n\n*****Optimization needs more steps*****\n{0}\n'.format(location))
                        #restart the calculation. First, move the gbw file
                        wavefunctionMove = subprocess.Popen('mv geometryOptimizationOrca.gbw geometryOptimizationOrcaOLD.gbw', cwd=location, shell=True)
                        #now, modify the .inp file! Read all the lines of input file
                        optfile = open('{0}geometryOptimizationOrca.inp'.format(location), 'r')
                        lines = optfile.readlines()
                        optfile.close()
                        newopt = open('{0}geometryOptimizationOrca.inp'.format(location), 'w')
                        newopt.write('#give keywords by using !\n')
                        newopt.write('#functional, number of basis sets, dispersion correction\n')
                        newopt.write('! PBE Def2-TZVP TIGHTSCF OPT D3BJ MORead pal6\n')
                        newopt.write('%moinp "geometryOptimizationOrcaOLD.gbw"\n')
                        newopt.write('#the numbers after xyzfile correspond to charge and multiplicity\n')
                        #takes the final line of the input file and reprints it so that the code does not need to reprint the input coordiate file name
                        newopt.write('{0}'.format(lines[-1]))
                        newopt.close()
                        #make sure there are no 'ulimit' requests in the input file
                        submissionFile = open('{0}job.slurm'.format(location), 'r')
                        subLines = submissionFile.readlines()
                        submissionFile.close()
                        time.sleep(0.1)
                        newSubFile = open('{0}job.slurm'.format(location), 'w')
                        for subLine in subLines:
                            print('{0}'.format(subLine))
                            if 'ulimit -s unlimited' not in subLine:
                                print('{0}'.format(subLine))
                                newSubFile.write(subLine)
                        newSubFile.close()
                        #get the name of the coordinate file out of the last line of lines so that it can be used to move the coordinates from the unfinished calculation
                        coordName = lines[-1].rsplit(' ', 1)[1]
                        structureMove = subprocess.Popen(r'mv geometryOptimizationOrca.xyz {0}'.format(coordName), cwd=location, shell=True)
                        job = subprocess.Popen('sbatch job.slurm', stdout=subprocess.PIPE, cwd=location, shell=True)
                        #get the job number so it can be added to the JobId file
                        jobNumber = job.communicate()[0].split()[3]
                        print('{0} {1}'.format(jobNumber,structure))
                        #append the job number into the file
                        jobFile = open('{0}JobId'.format(location), 'w')
                        jobFile.write('{0}'.format(jobNumber))
                        jobFile.close()
                #make sure the success message is present in the file
                elif "OPTIMIZATION" in str(calcFlag):
                    getEnergy = subprocess.Popen('grep "FINAL SINGLE POINT ENERGY" geometryOptimizationOrca.out | tail -n 1', stdout=subprocess.PIPE, cwd=location, shell=True)
                    v = Decimal(getEnergy.communicate()[0].split()[4])
                    d[k].append(v)
                    #if 'zfs' not in location:
                        #try:
                            #subprocess.Popen('bash -c "mv {0}/{1}/ /zfs1/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/"'.format(location.rsplit('/',2)[0],structure.replace("'","\\'")), cwd=location.rsplit('/',2)[0]+'/', shell=True)
                        #except:
                            #print('Trouble moving {0}\n'.format(location))
                elif "ORCA_GSTEP" in str(lambdaFlag):
                    ignore = 1
                    print('Gstep error in calculation {0}\n'.format(location))
                else:
                    getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=location, shell=True)
                    tempNumber = getNumber.communicate()[0]
                    if tempNumber not in activeJobs:
                        print('\n\n\n*****Walltime likely exceeded*****\n{0}\n\n\n'.format(location))



#***************************Part 2***************************
    #get the names of the interaction configurations
    iStructures = subprocess.Popen(r'ls *_* -d', stdout=subprocess.PIPE, cwd='/ihome/kjohnson/jpr54/orca/geometryOptimizations/interactions/', shell=True)
    zStructures = subprocess.Popen(r'ls *_* -d', stdout=subprocess.PIPE, cwd='/zfs1/kjohnson/jpr54/orca/geometryOptimizations/interactions/', shell=True)
    interactionsi = iStructures.communicate()[0].split()
    interactionsz = zStructures.communicate()[0].split()
    interactions = interactionsi + interactionsz
    #make sure there are mirroring directories for everything on ihome on zfs
    for pair in interactionsi:
        if pair not in interactionsz:
            subprocess.Popen('mkdir /zfs1/kjohnson/jpr54/orca/geometryOptimizations/interactions/{0}'.format(pair), shell=True)
    time.sleep(0.25)
    #make another dictionary for the interaction calculation energies
    d2 = defaultdict(list)
    d3 = defaultdict(list)
    #get the most negative energy for each interaction, and every energy for the interaction -> store this separately.
    for iStruct in (interactions):
        if iStruct not in d2.keys():
            tempListAllEnergies = []
            tempListAllConfigs = []
            appendEnergies = []
            appendConfigs = []
            minimum = 0
            index = 0
            optSuccess = 0
            localMinimumLocation = ''
            k = iStruct
            if iStruct in interactionsz:
                outerLocation = '/zfs1/kjohnson/jpr54/orca/geometryOptimizations/interactions/' + iStruct + '/'
                minimum, index, localMinimumLocation, tempListAllEnergies, tempListAllConfigs, optSuccess = calculationStatus( outerLocation, name, activeJobs, minimum, index, localMinimumLocation, optSuccess )
            if iStruct in interactionsi:
                outerLocation = '/ihome/kjohnson/jpr54/orca/geometryOptimizations/interactions/' + iStruct + '/'
                minimum, index, localMinimumLocation, appendEnergies, appendConfigs, optSuccess = calculationStatus( outerLocation, name, activeJobs, minimum, index, localMinimumLocation, optSuccess )
                tempListAllEnergies = tempListAllEnergies + appendEnergies
                tempListAllConfigs = tempListAllConfigs + appendConfigs
            d2[k].append(minimum)
            d2[k].append(index)
            d2[k].append(optSuccess)
            d3[k].append(tempListAllEnergies)
            d3[k].append(tempListAllConfigs)
            d3[k].append(optSuccess)


#***************************Part 3************************************
    #calculate the interaction energies
    #allow for selection of only specific analyte to print
    filter = 5
    switchType = 1
    while (switchType != 0):
        while (filter != 1 and filter != 2 and filter != 3 and filter != 4):
            if (filter != 5):
                print('\nLikely invalid entry. Try again.\n\n')
            f1 = raw_input('\n\nTo print energies for all pairs, type 1.\nTo filter data, type 2.\nTo print all interaction energies for a single pair, type 3.\nTo exit, type 4.\n')
            if not f1:
                print('\nEnter a value\n')
                filter = 5
            else:
                try:
                    filter = int(f1)
                except ValueError:
                    print('Invalid entry. Try again.\n')
            if (filter == 1):
                #for each key in d2, split the key at the underscore.
                for key in d2:
                    singleMols = key.split("_")
                    energy1 = d.get(singleMols[0].lower())
                    energy2 = d.get(singleMols[1].lower())
                    try:
                        interE = d2.get(key)
                        print('\n{0:40}\tconfiguration {1} out of {2} converged.'.format(key,interE[1].replace("/",""),interE[2]))
                        #2625.5 is conversion factor between hartree and kJ/mol
                        bindingEnergy = Decimal(2625.5)*(interE[0] - (energy1[0] + energy2[0]))
                        print('{0} kJ/mol'.format(bindingEnergy))
                    except:
                        print('\nNo data for {0} yet.\n'.format(singleMols))
            elif (filter == 2):
                agent = 'apple'
                flag = 0
                while (agent != 'owl'):
                    dataList = []
                    if (agent != 'apple'):
                        if (agent == 'more'):
                            print('\nJust one second...\n')
                            time.sleep(0.55)
                        else:
                            print('\nLikely invalid entry. Try again.')
                    agent = raw_input('Enter the name of an agent.\n')
                    for key in d2:
                        if agent in key:
                            flag = 1
                            singleMols = key.split("_")
                            energy1 = d.get(singleMols[0].lower())
                            energy2 = d.get(singleMols[1].lower())
                            try:
                                interE = d2.get(key)
                                #2625.5 is conversion factor between hartree and kJ/mol
                                bindingEnergy = Decimal(2625.5)*(interE[0] - (energy1[0] + energy2[0]))
                                tempList = [key, bindingEnergy, interE[1].replace("/",""), interE[2]]
                                dataList.append(tempList)
                            except:
                                print('\nNo data for {0} yet.'.format(singleMols))
                    #sort dataList and print it
                    dataListFinal = sorted(dataList, key=operator.itemgetter(1))
                    for row in range(0,len(dataListFinal)):
                        print('\n{0:40}\tconfiguration {1} out of {2} converged.'.format(dataListFinal[row][0],dataListFinal[row][2],dataListFinal[row][3]))
                        print('{0} kJ/mol'.format(dataListFinal[row][1]))
                    if (flag == 1):
                        repeat = 's'
                        while (repeat != 'y' and repeat != 'n'):
                            if (repeat != 's'):
                                print('\nInvalid entry. Try again.\n')
                            repeat = raw_input('\nAdditional data needed? (y/n)\n')
                            if not repeat:
                                print('\nEnter a value\n')
                                repeat = 's'
                            if (repeat == 'y'):
                                agent = 'more'
                            elif (repeat == 'n'):
                                agent = 'owl'
            elif (filter == 3):
                #print all binding energies for a specified molecule
                agent = 'apple'
                flag = 0
                while (agent != 'owl'):
                    dataList = []
                    pairArrayPre = []
                    pairArray = []
                    if (agent != 'apple'):
                        if (agent == 'more'):
                            print('\nJust one second...\n')
                            time.sleep(0.50)
                        else:
                            print('\nLikely invalid entry. Try again.')
                    print('\nInteraction Pairs:')
                    for key in d2:
                        pairArrayPre.append(key)
                    pairArray = sorted(pairArrayPre, key=str.lower)
                    for counter, mols in enumerate(pairArray):
                        print('{0}: {1}'.format(counter,mols))
                    pairs = raw_input('\nEnter the numbers corresponding to interaction pairs for which you need data.\nInvalid entries will be ignored, and calculations without results yet will print the pair name with no energies.\n')
                    if not pairs:
                        print('\nEnter a value.\n')
                        time.sleep(0.10)
                    pairList = np.unique(np.array([int(s) for s in pairs.split() if s.isdigit()]))
                    for pair in pairList:
                        if (pair <= counter):
                            print('\n{0}'.format(pairArray[pair]))
                            time.sleep(0.10)
                            flag = 1
                            singleMols = pairArray[pair].split("_")
                            energy1 = d.get(singleMols[0].lower())
                            energy2 = d.get(singleMols[1].lower())
                            interE = d3.get(pairArray[pair])
                            for j, step in enumerate(interE[0]):
                                bindingEnergy = Decimal(2625.5)*(step - (energy1[0] + energy2[0]))
                                tempList = [interE[1][j].replace("/",""), bindingEnergy]
                                dataList.append(tempList)
                    dataListFinal = sorted(dataList, key=operator.itemgetter(1))
                    for row in range(0,len(dataListFinal)):
                        print('configuration {0}:\t{1} kJ/mol\n'.format(dataListFinal[row][0],dataListFinal[row][1]))
                    print('{0} total converged configurations.\n'.format(interE[2]))
                    if (flag == 1):
                        repeat = 's'
                        while (repeat != 'y' and repeat != 'n'):
                            if (repeat != 's'):
                                print('\nInvalid entry. Try again.\n')
                            repeat = raw_input('\nAdditional data needed? (y/n)\n')
                            if not repeat:
                                print('\nEnter a value\n')
                                repeat = 's'
                            if (repeat == 'y'):
                                agent = 'more'
                            elif (repeat == 'n'):
                                agent = 'owl'
            elif (filter == 4):
                switchType = 0
        if (switchType == 1):
            roll = 0
            while (roll != 1):
                tempControl = raw_input('\nDo you need to do additional operations? (y/n)\n')
                if (tempControl == 'y'):
                    print('\nJust one second.\n')
                    time.sleep(0.5)
                    roll = 1
                    filter = 5
                elif (tempControl == 'n'):
                    switchType = 0
                    roll = 1
                else:
                    print('\nPlease try again.\n')
elif 'ihome' not in fs:
    print('{0}'.format(fs))
    print('\n\nYou need to cd to ihome.\n')
else:
    print('\n\nYou are logged in to the wrong location. Log in to opa.\n')

