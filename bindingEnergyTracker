#! /usr/bin/env python
#code will determine the greatest interaction energy for each molecule calculation pair, and provide a convenient view of final and initial positions for the optimization

#import os
import subprocess
import readline
import shutil
from re import sub
from collections import defaultdict
from decimal import *

#set decimal context
getcontext().prec = 14

#determine who the user is
user = subprocess.Popen(r'whoami', stdout=subprocess.PIPE)
name = str(user.communicate()[0].split()).replace("['","").replace("']","")

if name == 'jpr54':
    trajectoryLocation = '/ihome/kjohnson/jpr54/orca/geometryOptimizations/bestInteractionTrajectories/'
#elif name == 'krb115':
    #trajectoryLocation = '/ihome/kjohnson/krb115/orca/bestInteractionTrajectories/'

#figure out what is in the queue
currentJobs = subprocess.Popen(r'qstat -n one_day -u jpr54 | grep "one_day" | cut -d. -f 1', stdout=subprocess.PIPE, shell=True)
activeJobs = currentJobs.communicate()[0].split()

#identify all the energies of the single molecules
sStructures = subprocess.Popen(r'ls', stdout=subprocess.PIPE, cwd=r'/ihome/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/')
#sub1Structures = subprocess.Popen(r'ls', stdout=subprocess.PIPE, cwd=r'/ihome/kjohnson/krb115/orca/singleMolecules/')
singleMolecules1 = sStructures.communicate()[0].split()
#singleMolecules2 = sub1Structures.communicate()[0].split()
d = defaultdict(list)

#create array to hold energies of single molecules.
#get the energies of all the single molecules, store them in the dictionary in position corresponding to name
for counter, structure in enumerate(singleMolecules1):# + singleMolecules2):
    if structure.lower() not in d.keys():
        k = structure.lower()
        if structure in singleMolecules1:
            location = '/ihome/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/' + structure + '/'
        #elif structure in singleMolecules2:
        #    location = '/ihome/kjohnson/krb115/orca/singleMolecules/' + structure + '/'
        files = subprocess.Popen(r'ls', stdout=subprocess.PIPE, cwd=location)
        fileNames = files.communicate()[0].split()
        #next line will only show calculations that have finished running: not true
        if "geometryOptimizationOrca.out" in fileNames:
            additionalCycles = subprocess.Popen(r'grep "The optimization did not converge but reached the maximum number of" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=location, shell=True)
            cycleFlag = additionalCycles.communicate()[0]
            calcSuccess = subprocess.Popen(r'grep "OPTIMIZATION RUN DONE" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=location, shell=True)
            calcFlag = calcSuccess.communicate()[0]
            lambdaSuccess = subprocess.Popen('grep "Error (ORCA_GSTEP)" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=location, shell=True)
            lambdaFlag = lambdaSuccess.communicate()[0]
            #next line will make sure that calculation did not run out of geometry optimization steps
            if "The optimization did not converge" in str(cycleFlag):
                #check if the calculation is idled in the queue
                getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=location, shell=True)
                tempNumber = getNumber.communicate()[0]
                if tempNumber not in activeJobs:
                    print('\n\n\n*****Optimization needs more steps*****\n{0}\n'.format(location))
                    #restart the calculation. First, move the gbw file
                    wavefunctionMove = subprocess.Popen(r'mv geometryOptimizationOrca.gbw geometryOptimizationOrcaOLD.gbw', cwd=location, shell=True)
                    #now, modify the .inp file! Read all the lines of input file
                    optfile = open('{0}geometryOptimizationOrca.inp'.format(location), 'r')
                    lines = optfile.readlines()
                    optfile.close()
                    newopt = open('{0}geometryOptimizationOrca.inp'.format(location), 'w')
                    newopt.write('#give keywords by using !\n')
                    newopt.write('#functional, number of basis sets, dispersion correction\n')
                    newopt.write('! PBE Def2-TZVP TIGHTSCF OPT D3BJ MORead pal8\n')
                    newopt.write('%moinp "geometryOptimizationOrcaOLD.gbw"\n')
                    newopt.write('#the numbers after xyzfile correspond to charge and multiplicity\n')
                    #takes the final line of the input file and reprints it so that the code does not need to reprint the input coordiate file name
                    newopt.write('{0}'.format(lines[-1]))
                    newopt.close()
                    #get the name of the coordinate file out of the last line of lines so that it can be used to move the coordinates from the unfinished calculation
                    coordName = lines[-1].rsplit(' ', 1)[1]
                    structureMove = subprocess.Popen(r'mv geometryOptimizationOrca.xyz {0}'.format(coordName), cwd=location, shell=True)
                    job = subprocess.Popen('qsub job.pbs', stdout=subprocess.PIPE, cwd=location, shell=True)
                    #get the job number so it can be added to the JobId file
                    jobNumber = str(job.communicate()[0].split()).rsplit('.')[0].replace("['","")
                    print('{0} {1}'.format(jobNumber,structure))
                    #append the job number into the file
                    jobFile = open('{0}JobId'.format(location), 'w')
                    jobFile.write('{0}'.format(jobNumber))
                    jobFile.close()
                
                
            #make sure the success message is present in the file
            elif "OPTIMIZATION" in str(calcFlag):
                getEnergy = subprocess.Popen(r'grep "FINAL SINGLE POINT ENERGY" geometryOptimizationOrca.out | tail -n 1', stdout=subprocess.PIPE, cwd=location, shell=True)
                v = Decimal(getEnergy.communicate()[0].split()[4])
                d[k].append(v)
            elif "ORCA_GSTEP" in str(lambdaFlag):
                ignore = 1
            else:
                getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=location, shell=True)
                tempNumber = getNumber.communicate()[0]
                if tempNumber not in activeJobs:
                    print('\n\n\n*****Walltime likely exceeded*****\n{0}\n\n\n'.format(location))


#get the names of the interaction configurations
iStructures = subprocess.Popen(r'ls *_* -d', stdout=subprocess.PIPE, cwd=r'/ihome/kjohnson/jpr54/orca/geometryOptimizations/interactions/', shell=True)
#subIStructures = subprocess.Popen(r'ls *_* -d', stdout=subprocess.PIPE, cwd=r'/ihome/kjohnson/krb115/orca/multipleMolecules/', shell=True)
interactions1 = iStructures.communicate()[0].split()
#interactions2 = subIStructures.communicate()[0].split()

#make another dictionary for the interaction calculation energies
d2 = defaultdict(list)

#get the most negative energy for each interaction
for iStruct in (interactions1):# + interactions2):
    if iStruct.lower() not in d2.keys():
        k = iStruct
        if iStruct in interactions1:
            outerLocation = '/ihome/kjohnson/jpr54/orca/geometryOptimizations/interactions/' + iStruct + '/'
        #elif iStruct in interactions2:
            #outerLocation = '/ihome/kjohnson/krb115/orca/multipleMolecules/' + iStruct + '/'
        #ls the number directories for each interaction pair
        nums = subprocess.Popen(r'ls -d */', stdout=subprocess.PIPE, cwd=outerLocation, shell=True)
        numbers = nums.communicate()[0].split()
        #find the mimimum for each calculation
        minimum = 0
        index = 0
        for number in numbers:
            innerLocation = outerLocation + str(number)
            files2 = subprocess.Popen(r'ls', stdout=subprocess.PIPE, cwd=innerLocation)
            fileNames2 = files2.communicate()[0].split()
            if "geometryOptimizationOrca.out" in fileNames2:
                additionalCycles2 = subprocess.Popen(r'grep "The optimization did not converge but reached the maximum number of" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                cycleFlag2 = additionalCycles2.communicate()[0]
                calcSuccess2 = subprocess.Popen(r'grep "OPTIMIZATION RUN DONE" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                calcFlag2 = calcSuccess2.communicate()[0]
                lambdaSuccess2 = subprocess.Popen('grep "Error (ORCA_GSTEP)" geometryOptimizationOrca.out', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                lambdaFlag2 = lambdaSuccess2.communicate()[0]
                if "The optimization did not converge" in str(cycleFlag2):
                    getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    tempNumber = getNumber.communicate()[0]
                    if tempNumber not in activeJobs:
                        print('\n\n\n*****Optimization needs more steps*****\n{0}\n'.format(innerLocation))
                        #determine if the calculation is in the user's directory, or a different user.
                        if (iStruct in interactions1 and name == 'jpr54'):
                            #restart the calculation. First, move the gbw file
                            wavefunctionMove = subprocess.Popen(r'mv geometryOptimizationOrca.gbw geometryOptimizationOrcaOLD.gbw', cwd=innerLocation, shell=True)
                            #the name of the structure file should be...
                            structureFileName = iStruct + '_' + str(number)
                            #structureMove = subprocess.Popen(r'mv geometryOptimizationOrca.xyz {0}.xyz'.format(structureFileName.replace('c',',')), cwd=innerLocation, shell=True)
                            #now, modify the .inp file! Read all the lines of input file
                            optfile = open('{0}geometryOptimizationOrca.inp'.format(innerLocation), 'r')
                            lines = optfile.readlines()
                            optfile.close()
                            newopt = open('{0}geometryOptimizationOrca.inp'.format(innerLocation), 'w')
                            newopt.write('#give keywords by using !\n')
                            newopt.write('#functional, number of basis sets, dispersion correction\n')
                            newopt.write('! PBE Def2-TZVP TIGHTSCF OPT D3BJ MORead pal8\n')
                            newopt.write('%moinp "geometryOptimizationOrcaOLD.gbw"\n')
                            newopt.write('#the numbers after xyzfile correspond to charge and multiplicity\n')
                            newopt.write('{0}'.format(lines[-1]))
                            newopt.close()
                            coordName = lines[-1].rsplit(' ', 1)[1]
                            structureMove = subprocess.Popen(r'mv geometryOptimizationOrca.xyz {0}'.format(coordName), cwd=innerLocation, shell=True)
                            job = subprocess.Popen('qsub job.pbs', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)

                            #get the job number so it can be added to the JobId file
                            jobNumber = str(job.communicate()[0].split()).rsplit('.')[0].replace("['","")
                            print('{0} {1}'.format(jobNumber,structureFileName))
                            #append the job number into the file so it can be compared to what is running in the queue
                            jobFile = open('{0}JobId'.format(innerLocation), 'w')
                            jobFile.write('{0}'.format(jobNumber))
                            jobFile.close()
                
                elif "OPTIMIZATION" in str(calcFlag2):
                    getEnergy = subprocess.Popen(r'grep "FINAL SINGLE POINT ENERGY" geometryOptimizationOrca.out | tail -n 1', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    v = Decimal(getEnergy.communicate()[0].split()[4])
                    trajectoryMoveLocation = trajectoryLocation+iStruct+'OptimumTrajectory.xyz'
                    if v < minimum:
                        minimum = v
                        index = number
                        copyTrajectory = subprocess.Popen(r'cp -f geometryOptimizationOrca.trj {0}'.format(trajectoryMoveLocation), stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                elif "ORCA_GSTEP" in lambdaFlag2:
                    ignore = 1
                else:
                    getNumber = subprocess.Popen('cat JobId', stdout=subprocess.PIPE, cwd=innerLocation, shell=True)
                    tempNumber = getNumber.communicate()[0]
                    if tempNumber not in activeJobs:
                        print('\n\n\n*****Walltime likely exceeded*****\n{0}\n\n\n'.format(innerLocation))
        d2[k].append(minimum)
        d2[k].append(index)

#calculate the interaction energies

#allow for selection of only specific analyte to print
filter = 3
while (filter != 1 and filter != 2):
    if (filter != 3):
        print('\nLikely invalid entry. Try again.\n\n')
    f1 = raw_input('To print energies for all pairs, type 1.\nTo filter data, type 2.\n\n')
    if not f1:
        print('\nEnter a value\n')
        filter = 3
    else:
        try:
            filter = int(f1)
        except ValueError:
            print('Invalid entry. Try again.\n')
    if (filter == 1):
        #for each key in d2, split the key at the underscore.
        for key in d2:
            singleMols = key.split("_")
            energy1 = d.get(singleMols[0].lower())
            energy2 = d.get(singleMols[1].lower())
            interE = d2.get(key)
            print('\n{0}, configuration {1}'.format(singleMols,interE[1].replace("/","")))
            #2625.5 is conversion factor between hartree and kJ/mol
            bindingEnergy = Decimal(2625.5)*(interE[0] - (energy1[0] + energy2[0]))
            print('{0} kJ/mol'.format(bindingEnergy))
    elif (filter == 2):
        agent = 'apple'
        while (agent != 'owl'):
            if (agent != 'apple'):
                print('\nLikely invalid entry. Try again.\n\n')
            agent = raw_input('Enter the name of an agent.\n')
            for key in d2:
                if agent in key:
                    singleMols = key.split("_")
                    energy1 = d.get(singleMols[0].lower())
                    energy2 = d.get(singleMols[1].lower())
                    interE = d2.get(key)
                    print('\n{0}, configuration {1}'.format(singleMols,interE[1].replace("/","")))
                    #2625.5 is conversion factor between hartree and kJ/mol
                    bindingEnergy = Decimal(2625.5)*(interE[0] - (energy1[0] + energy2[0]))
                    print('{0} kJ/mol'.format(bindingEnergy))
            agent = 'owl'


